#!/usr/bin/python -tt
#20111111 15:33:43 
#Nathan Nard

"""This code is used to convert gbk files from the IMG database into a more 
useful fasta format, with headings like:
  >oid|#######|Locus|Address|Product Annotation
  amino acid sequence
"""

import sys
import re
import pdb


def get_object(lines, line, lineNum):
  
 
  obj = line[line.index('"'):-1]

  if obj[-1] != '"':
    multLineSwitch = True
  else:
    multLineSwitch = False
  
  while multLineSwitch:
    lineNum += 1
    line = lines[lineNum]
    addSnip = line[21:-1]
    obj += addSnip
    if obj[-1] == '"':
      multLineSwitch = False
      
  return obj.split('"')[1]



def main():
  #run stuff here
  if len(sys.argv) == 2:
    fileName = sys.argv[1]
  else:
    print "either too many arguments, or not enough.  Please provide one file name of a gbk file."
    
  f = open(fileName, "r")
  lines = f.readlines()
  f.close()
  
  f = open(fileName[:-4]+".faa", "w")
  geneSwitch = False
  lineNum = 0
  for line in lines:
    sline = line.split()#split line by whitespace.  Something like this will be returned: ['LOCUS', 'wf1_Contig929', '976', 'bp', 'DNA', '04-NOV-2011']
    try:
      sline[0]
      if (sline[0] == "LOCUS") and (len(sline) > 1):
        sline = line.split() 
        locusTag = sline[1]
      elif (sline[0] == "CDS") and (len(sline) > 1):
        address = sline[1]
        geneSwitch = True
      elif (geneSwitch) and (line.find("/note=") != -1):
        oid = re.findall("[0-9]+", line)[0] #will return first object in list generated by re.findall.  example output of re.findall: ['2001399384']
      elif (geneSwitch) and (line.find("/product") != -1):
        annotation = get_object(lines, line, lineNum)
        
      elif (geneSwitch) and (line.find(" "*21 + "/translation") != -1):
        aaSeq = get_object(lines, line, lineNum)
        geneSwitch = False
        try:
          len(annotation)
        except:
          annotation = "No Annotation"
#        if oid == "2004221833":
#          pdb.set_trace()
        f.write(">oid|" + oid + "|[" + locusTag + "]|" + address + "|" + annotation +"\n")
        f.write(aaSeq+"\n")
        f.write("\n")

        del annotation
    except:
      continue
    lineNum += 1
  f.close()


if __name__ == '__main__':#initiate main function, which does stuff
  main()
